<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
        "https://checkstyle.org/dtds/configuration_1_3.dtd">

<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html
    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.org (or in your downloaded distribution).
    To completely disable a check, just comment it out or delete it from the file.
    To suppress certain violations please review suppression filters.
    Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
 -->

<module name = "Checker">
    <property name="charset" value="UTF-8"/>

    <property name="severity" value="warning"/>

    <property name="fileExtensions" value="java, properties, xml"/>

    <!--
        https://checkstyle.sourceforge.io/config_filefilters.html#BeforeExecutionExclusionFileFilter
        checkstyle 제외할 파일 설정
    -->
    <module name="BeforeExecutionExclusionFileFilter">
        <property name="fileNamePattern" value="module\-info\.java$"/>
    </module>

    <!--
        https://checkstyle.sourceforge.io/config_filters.html#SuppressionFilter
    -->
    <module name="SuppressionFilter">
        <property name="file" value="${org.checkstyle.google.suppressionfilter.config}"
                  default="checkstyle-suppressions.xml" />
        <property name="optional" value="true"/>
    </module>

    <!--
        https://checkstyle.sourceforge.io/config_whitespace.html#FileTabCharacter
        탭 문자가 있는지 검사
    -->
    <module name="FileTabCharacter">
        <!-- eachLine=true  탭 문자가 들어있는 모든 Line에 대해 보고함 -->
        <!-- eachLine=false 탭 문자가 들어있는 첫 Line에 대해서만 보고함 -->
        <property name="eachLine" value="true"/>
    </module>

    <!--
        https://checkstyle.sourceforge.io/config_sizes.html#LineLength

        한 줄당 캐릭터 수 제한
    -->
    <module name="LineLength">
        <!-- 적용할 확장자 -->
        <property name="fileExtensions" value="java"/>
        <!-- 캐릭터 수 제한 값 설정 -->
        <property name="max" value="100"/>
        <!-- Ignore -->
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
    </module>

    <module name="TreeWalker">
        <!--
            https://checkstyle.sourceforge.io/config_misc.html#OuterTypeFilename

            /* bad */
            // Apple.java
            class Banana {
            }

            /* good */
            // Apple.java
            class Apple {
            }
        -->
        <module name="OuterTypeFilename"/>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#IllegalTokenText

            /* bad */
            char tab = '\u0009';
            /* bad */
            char octalTab = '\011';
            /* good */
            char escapedSequenceTab = '\t';
        -->
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format"
                      value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message"
                      value="Consider using special escape sequence instead of octal value or Unicode escaped value."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_misc.html#AvoidEscapedUnicodeCharacters

            /* bad */
            String unicode = "\u03BCS";
            /* allow by allowEscapesForControlCharacters */
            String unicode = "\u200E";
            /* allow by allowByTailComment */
            String unicode = "\u03BCS"; // the reader has no idea what this is.
            /* allow by allowNonPrintableEscapes */
            String unicode = "\u0020";
            /* good */
            String unitAbbrev = "μs";
        -->
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_imports.html#AvoidStarImport

            /* bad */
            import net.spy.memcached.*;

            /* good */
            import net.spy.memcached.ArcusClient;
        -->
        <module name="AvoidStarImport"/>

        <!--
            https://checkstyle.sourceforge.io/config_design.html#OneTopLevelClass

            /* bad */
            // Parent.java
            class Parent {
            }
            class Child {
            }

            /* good */
            // Parent.java
            class Parent {
            }
            // Child.java
            class Child {
            }
        -->
        <module name="OneTopLevelClass"/>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#NoLineWrap

            /* bad by PACKAGE_DEF */
            package com.puppycrawl.
                    tools.checkstyle.checks;
            /* bad by IMPORT */
            import com.puppycrawl.tools.
                   checkstyle.api.AbstractCheck;
            /* bad by STATIC_IMPORT */
            import static java.math.
                   BigInteger.ZERO;

            /* good */
            package com.puppycrawl.tools.checkstyle.checks;
            import com.puppycrawl.tools.checkstyle.api.AbstractCheck;
            import static java.math.BigInteger.ZERO;
        -->
        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_blocks.html#EmptyBlock

           /* bad */
           if (a==b) {
               // empty block
           } else {
               System.out.println("not equal");
           }

           /* good */
           if (a==b) {
               System.out.println("equal");
           } else {
               System.out.println("not equal");
           }
        -->
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_blocks.html#NeedBraces

            /* bad */
            if (a==b)
                System.out.println("equal");
            else
                System.out.println("not equal");

            /* good */
            if (a==b) {
                System.out.println("equal");
            } else {
                System.out.println("not equal");
            }
        -->
        <module name="NeedBraces">
            <property name="tokens"
                      value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_blocks.html#LeftCurly

            /* bad */
            if (1==1)
            {
                System.out.println("equal");
            }
            else
            {
                System.out.println("not equal");
            }

            /* good */
            if (1==1) {
                System.out.println("equal");
            } else {
                System.out.println("not equal");
            }
        -->
        <module name="LeftCurly">
            <property name="tokens"
                      value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,
                    INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,
                    LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,
                    OBJBLOCK, STATIC_INIT"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_blocks.html#RightCurly

            /* bad */
            if (a==b) {
                System.out.println("equal"); }
            else {
                System.out.println("not equal"); }

            /* good */
            if (1==1) {
                System.out.println("equal");
            } else {
                System.out.println("not equal");
            }
        -->
        <module name="RightCurly">
            <property name="id" value="RightCurlySame"/>
            <property name="tokens"
                      value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,
                    LITERAL_DO"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_filters.html#SuppressionXpathSingleFilter
        -->
        <module name="SuppressionXpathSingleFilter">
            <property name="id" value="RightCurlyAlone"/>
            <property name="query" value="//RCURLY[parent::SLIST[count(./*)=1]
                                                 or preceding-sibling::*[last()][self::LCURLY]]"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#WhitespaceAround

            /* allow by allowEmptyConstructors */
            public MyClass() {}
            /* allow by allowEmptyLambdas */
            Runnable noop = () -> {}
            /* allow by allowEmptyMethods */
            public void func() {}
            /* allow by allowEmptyTypes */
            public class Alpha {}
            public @interface Beta {}
            /* allow by allowEmptyLoops */
            for (int i = 1; i > 1; i++) {}

            /* bad */
            void method(){
            }

            /* good */
            void method() {
            }

            /* bad */
            try {
                String str = null;
                str.isEmpty();
            } catch (NullPointerException e1) {} catch (IllegalStateException e2) {}

            /* good */
            try {
              String str = null;
              str.isEmpty();
            } catch (NullPointerException e1) {
            } catch (IllegalStateException e2) { }

            /* bad */
            if (a==b) {
            }

            /* good */
            if (a == b) {
            }
        -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyLambdas" value="true"/>
            <property name="allowEmptyMethods" value="false"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="tokens"
                      value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,
                    BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,
                    LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,
                    LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,
                     LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,
                     NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,
                     SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"/>
            <message key="ws.notFollowed"
                     value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded"
                     value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#OneStatementPerLine

            /* bad */
            int var1 = 1;
            int var2 = 2;
            var1++; var2++;

            /* good */
            int var = 1, var2 = 2;
            var1++;
            var2++;
        -->
        <module name="OneStatementPerLine"/>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#MultipleVariableDeclarations

            /* bad */
            int foo, bar, fooarray[];

            /* good */
            int foo;
            int bar;
            int[] fooarray;
        -->
        <module name="MultipleVariableDeclarations"/>

        <!--
            https://checkstyle.sourceforge.io/config_misc.html#ArrayTypeStyle

            /* bad */
            int[] nums;
            String strings[];

            /* good */
            int[] nums;
            String[] strings;
        -->
        <module name="ArrayTypeStyle"/>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#MissingSwitchDefault

            /* bad */
            switch (i) {
            case 1:
                break;
            case 2:
                break;
            }

            /* good */
           switch (i) {
            case 1:
                break;
            case 2:
                break;
            default:
                 break;
            }
        -->
        <module name="MissingSwitchDefault"/>


        <!--
            https://checkstyle.sourceforge.io/config_coding.html#FallThrough

            /* bad */
            int i = 0;
            switch (i) {
              case 0:
                i++;
              case 1:
                i++;
              case 2:
              case 3: {
                i++;
              }
              default:
                break;
            }

            /* good */
            int i = 0;
            switch (i) {
              case 0:
                i++;
              // fall through
              case 1:
                i++;
              // fall through
              case 2:
              case 3: {
                i++;
              }
              // fall through
              default:
                break;
            }
        -->
        <module name="FallThrough">
            <property name="reliefPattern" value="falls?[ -]?thr(u|ough)"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_misc.html#UpperEll

            /* bad */
            long value = 100l

            /* good */
            long value = 100L
        -->
        <module name="UpperEll"/>


        <!--
            https://checkstyle.sourceforge.io/config_modifier.html#ModifierOrder
            1. public
            2. protected
            3. private
            4. abstract
            5. default
            6. static
            7. final
            8. transient
            9. volatile
            10. synchronized
            11. native
            12. strictfp

            /* bad */
            abstract public void abstractPublicMethod();

            /* good */
            public abstract void publicAbstractMethod();
        -->
        <module name="ModifierOrder"/>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#EmptyLineSeparator

            /* bad */
            package com.jam2in.main;
            import net.spy.memcached.ArcusClient;
            public class Main {
                public static void main(String[] args) {
                }
                public static void test() {
                }
            }

            /* good */
            package com.jam2in.main;

            import net.spy.memcached.ArcusClient;

            public class Main {
                public static void main(String[] args) {
                }

                public static void test() {
                }
            }
        -->
        <module name="EmptyLineSeparator">
            <property name="tokens"
                      value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#SeparatorWrap

            /* bad */
            new ConnectionFactoryBuilder().
                setAPIReadPriority(null).
                build();

            /* good */
            new ConnectionFactoryBuilder()
                .setAPIReadPriority(null)
                .build();
        -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot"/>
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#SeparatorWrap

            /* bad */
            System.out.printf(
                "%d %d %d"
                ,1
                ,2
                ,3
            );

            /* good */
            System.out.printf(
                "%d %d %d",
                1,
                2,
                3
            );
        -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma"/>
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#SeparatorWrap

            /* bad */
            public static void printf(
                String
                    arg1,
                Object
                    ...arg2) { }

            /* good */
            public static void printf(
                String
                    arg1,
                Object...
                    arg2) { }
        -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapEllipsis"/>
            <property name="tokens" value="ELLIPSIS"/>
            <property name="option" value="EOL"/>
        </module>
        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#SeparatorWrap

            /* bad */
            int
                []array;

            /* good */
            int[]
                array;
        -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapArrayDeclarator"/>
            <property name="tokens" value="ARRAY_DECLARATOR"/>
            <property name="option" value="EOL"/>
        </module>
        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#SeparatorWrap

            /* bad */
            Arrays.sort(stringArray, String::
                compareToIgnoreCase);

            /* good */
            Arrays.sort(stringArray, String
                ::compareToIgnoreCase);
        -->
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef"/>
            <property name="tokens" value="METHOD_REF"/>
            <property name="option" value="nl"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#PackageName

            /* bad */
            package COM;
            package com.A.checkstyle.checks;
            package com.checkSTYLE.checks;
            package com._checkstyle.checks_;

            /* good */
            package com;
            package com.checkstyle.checks;
            package com.checkstyle1.checks;
        -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern"
                     value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#TypeName

            /* bad */
            class myClass {
            }

            /* good */
            class MyClass {
            }
        -->
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*$"/>
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF"/>
            <message key="name.invalidPattern"
                     value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#MemberName

            /* bad */
            public int NUM1;
            protected int NUM2;
            final int NUM3;
            private int NUM4;

            /* ignored */
            static int NUM5 = 0;
            static int num6 = 0;

            /* good */
            public int num1;
            protected int num2;
            final int num3 = 3;
            private int num4;
        -->
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern"
                     value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>


        <!--
            https://checkstyle.sourceforge.io/config_naming.html#ParameterName


            /* bad */
            void method2(int v_2) {
            }

            void method3(int V3) {
            }

            /* good */
            void method1(int v1) {
            }

        -->
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#LambdaParameterName

            /* bad */
            Function<String, String> function2 = S -> S.toLowerCase();

            /* good */
            Function<String, String> function1 = s -> s.toLowerCase();
        -->
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Lambda parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#CatchParameterName

            /* bad */
            try {
            } catch (ArithmeticException ex1) {
            } catch (ArrayIndexOutOfBoundsException EX2) {
            }

            /* good */
            try {
            } catch (ArithmeticException ex1) {
            } catch (ArrayIndexOutOfBoundsException ex2) {
            }
        -->
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Catch parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>


        <!--
            https://checkstyle.sourceforge.io/config_naming.html#LocalVariableName

            /* bad */
            int v_1;
            int V2;

            /* good */
            int v1;
            int v2;
        -->
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/>
            <message key="name.invalidPattern"
                     value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#ClassTypeParameterName

            /* bad */
            class MyClass<t> { }

            /* good */
            class MyClass<T> { }
        -->
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#MethodTypeParameterName

            /* bad */
            public <a> void method() { }

            /* good */
            public <T> void method() { }
        -->
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#InterfaceTypeParameterName

            /* bad */
            interface FirstInterface<t> { }

            /* good */
            interface SecondInterface<T> { }
        -->
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern"
                     value="Interface type name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#NoFinalizer

            /* bad */
            @Override
            protected void finalize() throws Throwable {
                super.finalize();
            }
        -->
        <module name="NoFinalizer"/>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#GenericWhitespace

            /* bad */
            List <String> list;
            List<String>list;
            List< String> list;
            List<String > list;

            public< X, Y >X hello(X x, Y y) {
                return null;
            }

            /* good */
            List<String> list = new ArrayList<String>();

            public <X, Y> X hello(X x, Y y) {
                return null;
            }
        -->
        <module name="GenericWhitespace">
            <message key="ws.followed"
                     value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded"
                     value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow"
                     value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded"
                     value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_misc.html#Indentation
        -->
        <module name="Indentation">
            <!--
                /* bad */
                class Main {
                    void main() {
                    }
                }

                /* good */
                class Main {
                    void main() {
                    }
                }
            -->
            <property name="basicOffset" value="2"/>
            <!--
                /* bad */
                void main() {
                  }

                /* good */
                void main() {
                }
            -->
            <property name="braceAdjustment" value="0"/>
            <!--
                /* bad */
                int c = 100;
                switch (c) {
                    case 0:
                        break;
                    case 1:
                        break;
                    default:
                        break;
                }

                /* good */
                int c = 100;
                switch (c) {
                  case 0:
                    break;
                  case 1:
                    break;
                  default:
                    break;
                }
            -->
            <property name="caseIndent" value="2"/>
            <!--
                /* bad */
                public static void main(String[] args) throws
                  IOException {
                }

                /* good */
                public static void main(String[] args) throws
                    IOException {
                }
            -->
            <property name="throwsIndent" value="4"/>
            <!--
                /* bad */
                if ((1 == 1)
                  && (2 == 2)) {
                    System.out.println("equal");
                }

                /* good */
                if ((1 == 1)
                    && (2 == 2)) {
                    System.out.println("equal");
                }
            -->
            <property name="lineWrappingIndentation" value="4"/>
            <!--
                /* bad */
                int[] arr = {
                    5,
                    6
                };

                /* good */
                int[] arr = {
                  5,
                  6
                };
            -->
            <property name="arrayInitIndent" value="2"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#AbbreviationAsWordInName

            /* bad */
            int firstNUM;
            int secondNUm;

            /* good */
            int firstNum;
            int secondNum;
            int thirdNUm;     // allowedAbbrevitationLength=1
            String firstXML;  // abbreviation is allowed
            String firstURL;  // abbreviation is allowed
        -->
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF,
                    PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#OverloadMethodsDeclarationOrder

            /* bad */
            public void foo(int i) { }

            public void foo(String s) { }

            public void notFoo() { }

            public void foo(int i, String s) { }

            /* good */
            public void foo(int i) { }

            public void foo(String s) { }

            public void foo(int i, String s) { }

            public void notFoo() { }
        -->
        <module name="OverloadMethodsDeclarationOrder"/>

        <!--
            https://checkstyle.sourceforge.io/config_coding.html#VariableDeclarationUsageDistance

            /* bad */
            int a = 0;
            int b = 0;
            int count;
            a = a + b;  // A distance is 3     : OK
            b = a + a;  // B distance is 3     : OK
            int c;
            count = b;  // count distance is 4 : NOT OK

            /* good */
            int a = 0;
            int b = 0;
            int count;
            a = a + b;  // A distance is 3     : OK
            b = a + a;  // B distance is 3     : OK
            count = b;  // count distance is 3 : OK
        -->
        <module name="VariableDeclarationUsageDistance">
            <property name="allowedDistance" value="3"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_imports.html#CustomImportOrder

            /* bad */
            import org.apache.zookeeper.ZooKeeper;
            import net.spy.memcached.ArcusClient;
            import net.spy.memcached.compat.log.Log4JLogger;
            import java.util.ArrayList;
            import javax.sql.CommonDataSource;


            /* good */
            import java.util.ArrayList;
            import javax.sql.CommonDataSource;
            import net.spy.memcached.ArcusClient;
            import net.spy.memcached.compat.log.Log4JLogger;
            import org.apache.zookeeper.ZooKeeper;
        -->
        <module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true"/>
            <property name="separateLineBetweenGroups" value="true"/>
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"/>
            <property name="tokens" value="IMPORT, STATIC_IMPORT, PACKAGE_DEF"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#MethodParamPad

            /* bad */
            public void method (int arg) {
                Main main = new Main ();
                main.method (1);
            }

            /* good */
            public void method(int arg) {
                Main main = new Main();
                main.method(1);
            }
        -->
        <module name="MethodParamPad">
            <property name="tokens"
                      value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,
                    SUPER_CTOR_CALL, ENUM_CONSTANT_DEF"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#NoWhitespaceBefore

            /* bad */
            int a = 0 ;
            a ++;
            this .method(1, 2, 3);
            this.method(1 , 2 , 3);

            /* good */
            int a = 0;
            a++;
            this.method(1, 2, 3);
        -->
        <module name="NoWhitespaceBefore">
            <property name="tokens"
                      value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF"/>
            <property name="allowLineBreaks" value="true"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#ParenPad

            /* bad */
            new String( "hello" );
            this.method( "hello" );

            /* good */
            new String("hello");
            this.method("hello");
        -->
        <module name="ParenPad">
            <property name="tokens"
                      value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,
                    EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,
                    METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_whitespace.html#OperatorWrap

            /* bad */
            String str = "A" +
                "B";

            if ((a == b) &&
               (c == d)) {
               System.out.println("equal");
            }

            /* good */
            String str = "A"
                + "B";

            if ((a == b)
               && (c == d)) {
               System.out.println("equal");
            }
        -->
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens"
                      value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF "/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_annotation.html#AnnotationLocation

            /* bad */
            @Override @Nullable
            public String foo() {
                return "bar";
            }

            @SuppressWarnings("deprecation") public String foo() {
                return "bar";
            }

            /* good */
            @Override
            @Nullable
            public String foo() {
                return "bar";
            }

            @SuppressWarnings("deprecation")
            public String foo() {
                return "bar";
            }

            // allow one single parameterless annotation on the same line
            @Override public String foo() {
                return "bar";
            }

            @SuppressWarnings("deprecation") @Mock DataLoader loader;
        -->
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases"/>
            <property name="tokens"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables"/>
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#NonEmptyAtclauseDescription

            /* bad */
            /**
             * @param foo
             * @param bar
             * @return bar string
             */
            public String foo(int foo, int bar) {
                return "bar";
            }

            /* good */
            /**
             * @param foo foo integer
             * @param bar bar integer
             * @return bar string
             */
            public String foo(int foo, int bar) {
                return "bar";
            }
        -->
        <module name="NonEmptyAtclauseDescription"/>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#InvalidJavadocPosition

            /* bad */
            @SuppressWarnings("serial")
            /**
             * This comment looks like javadoc but it at an invalid location.
             * Therefore, the text will not get into TestClass.html and the check will produce a violation.
             */
            public class TestClass {
            }

            /* good */
            /**
             * This comment looks like javadoc but it at an invalid location.
             * Therefore, the text will not get into TestClass.html and the check will produce a violation.
             */
            @SuppressWarnings("serial")
            public class TestClass {
            }
        -->
        <module name="InvalidJavadocPosition"/>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#JavadocTagContinuationIndentation

            /* bad (indentation level < 4) */
            /**
             * @param foo
             *   foo integer
             * @param bar
             *   bar integer
             * @return bar string
             */
            public String foo(int foo, int bar) {
              return "bar";
            }

            /* good (indentation level 4) */
            /**
             * @param foo
             *     foo integer
             * @param bar
             *     bar integer
             * @return bar string
             */
            public String foo(int foo, int bar) {
              return "bar";
            }
        -->
        <module name="JavadocTagContinuationIndentation"/>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#SummaryJavadoc

            /* bad */
            /**
             * This is foo method
             */
            public String foo(int foo, int bar) {
                return "bar";
            }

            /* good */
            /**
             * This is foo method.
             */
            public String foo(int foo, int bar) {
                return "bar";
            }
        -->
        <module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments"
                      value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#JavadocParagraph

            /**
             * No tag (good).
             *
             * <p>Tag immediately before the text (good).
             * <p>No blank line before the tag (bad).
             *
             * <p>
             * New line after tag (bad).
             *
             * <p> Whitespace after tag (bad).
             *
             */
             public class TestClass {
             }
        -->
        <module name="JavadocParagraph"/>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#AtclauseOrder

            /* bad */
            /**
             * @return bar string
             * @param foo foo integer
             * @param bar bar integer
             */
            public String foo(int foo, int bar) {
                return "bar";
            }

            /* good */
            /**
             * @param foo foo integer
             * @param bar bar integer
             * @return bar string
             */
            public String foo(int foo, int bar) {
                return "bar";
            }
        -->
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target"
                      value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#JavadocMethod

            /* good - allow missing @param, @return tag */
            /**
             * This is foo method.
             */
            public String foo(int foo, int bar) {
                return "bar";
            }
        -->
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#MissingJavadocMethod

            /* bad - minLineCount is > 2 */
            public String foo(int foo, int bar) {
                System.out.println("foo");
                System.out.println("bar");
                return "bar";
            }

            /* good */
            /**
             * This is foo method.
             */
            public String foo(int foo, int bar) {
                System.out.println("foo");
                System.out.println("bar");
                return "bar";
            }

            /* good - minLineCount is <= 2 */
            public String foo(int foo, int bar) {
                System.out.println("foo");
                return "bar";
            }

            /* good - @Override, @Test is ignored */
            @Override
            public String foo(int foo, int bar) {
                System.out.println("foo");
                System.out.println("bar");
                return "bar";
            }
        -->
        <module name="MissingJavadocMethod">
            <property name="scope" value="public"/>
            <property name="minLineCount" value="2"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_naming.html#MethodName

            /* bad */
            void Foo() {
            }

            /* good */
            void bar() {
            }
        -->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern"
                     value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_javadoc.html#SingleLineJavadoc

            /* bad - not allowed inline tag. only allowed multi-line */
            /** Single line Javadoc that references {@link String}. */
            public void foo() {
            }

            /* good */
            /**
             * Single line Javadoc that references {@link String}.
             */
            public void foo() {
            }

            /* good */
            /** Single line Javadoc. */
            public void foo() {
            }
        -->
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_blocks.html#EmptyCatchBlock

            /* bad */
            try {
              throw new RuntimeException();
            } catch (RuntimeException e) {
            }

            /* good */
            try {
                throw new RuntimeException();
            } catch (RuntimeException expected) {
            }

            /* good */
            try {
                 throw new RuntimeException();
            } catch (RuntimeException e) {
                e.printStackTrace();
            }
        -->
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>

        <!--
            https://checkstyle.sourceforge.io/config_misc.html#CommentsIndentation

            /* bad */
                /*
                foo is true
            */
            boolean foo = true;

            /* bad */
                // bar is true
            boolean bar = true;

            /* good */
            /*
                foo is true
            */
            boolean foo = true;

            /* good */
            // bar is true
            boolean bar = true;
        -->
        <module name="CommentsIndentation">
            <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"/>
        </module>

        <!--
           https://checkstyle.org/config_filters.html#SuppressionXpathFilter
        -->
        <module name="SuppressionXpathFilter">
            <property name="file" value="${org.checkstyle.google.suppressionxpathfilter.config}"
                      default="checkstyle-xpath-suppressions.xml" />
            <property name="optional" value="true"/>
        </module>

    </module>

</module>